// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WorkNetwork.Data;

#nullable disable

namespace WorkNetwork.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220608231517_CampoIDPcias")]
    partial class CampoIDPcias
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WorkNetwork.Models.DisponibilidadHoraria", b =>
                {
                    b.Property<int>("idDisponibilidadHoraria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idDisponibilidadHoraria"), 1L, 1);

                    b.Property<string>("descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idDisponibilidadHoraria");

                    b.ToTable("DisponibilidadHoraria");
                });

            modelBuilder.Entity("WorkNetwork.Models.Empresa", b =>
                {
                    b.Property<int>("idEmpresa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idEmpresa"), 1L, 1);

                    b.Property<int>("CUIT")
                        .HasColumnType("int");

                    b.Property<int?>("LocalidadidLocalidad")
                        .HasColumnType("int");

                    b.Property<int?>("RubroidRubro")
                        .HasColumnType("int");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("idLocalidad")
                        .HasColumnType("int");

                    b.Property<int>("idRubro")
                        .HasColumnType("int");

                    b.Property<string>("imagen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("numeroDeDocumento")
                        .HasColumnType("int");

                    b.Property<string>("razonSocial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("telefono1")
                        .HasColumnType("int");

                    b.Property<int>("telefono2")
                        .HasColumnType("int");

                    b.HasKey("idEmpresa");

                    b.HasIndex("LocalidadidLocalidad");

                    b.HasIndex("RubroidRubro");

                    b.ToTable("Empresa");
                });

            modelBuilder.Entity("WorkNetwork.Models.Localidad", b =>
                {
                    b.Property<int>("idLocalidad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idLocalidad"), 1L, 1);

                    b.Property<int>("CP")
                        .HasColumnType("int");

                    b.Property<int?>("ProvinciaidProvincia")
                        .HasColumnType("int");

                    b.Property<int>("idProvincia")
                        .HasColumnType("int");

                    b.Property<string>("nombreLocalidad")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idLocalidad");

                    b.HasIndex("ProvinciaidProvincia");

                    b.ToTable("Localidad");
                });

            modelBuilder.Entity("WorkNetwork.Models.Pais", b =>
                {
                    b.Property<int>("idPais")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idPais"), 1L, 1);

                    b.Property<string>("nombrePais")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idPais");

                    b.ToTable("Pais");
                });

            modelBuilder.Entity("WorkNetwork.Models.Persona", b =>
                {
                    b.Property<int>("idPersona")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idPersona"), 1L, 1);

                    b.Property<string>("Genero")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LocalidadidLocalidad")
                        .HasColumnType("int");

                    b.Property<int?>("SubRubroidSubRubro")
                        .HasColumnType("int");

                    b.Property<string>("apellidoPersona")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("cantidadHijos")
                        .HasColumnType("int");

                    b.Property<string>("correoElectronico")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("domicilioPersona")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("estadoCivil")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("fechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<int>("idLocalidad")
                        .HasColumnType("int");

                    b.Property<int>("idSubRubro")
                        .HasColumnType("int");

                    b.Property<string>("imagen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nombrePersona")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("numeroDocumento")
                        .HasColumnType("int");

                    b.Property<int>("telefono1")
                        .HasColumnType("int");

                    b.Property<int>("telefono2")
                        .HasColumnType("int");

                    b.Property<string>("tituloAcademico")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idPersona");

                    b.HasIndex("LocalidadidLocalidad");

                    b.HasIndex("SubRubroidSubRubro");

                    b.ToTable("Persona");
                });

            modelBuilder.Entity("WorkNetwork.Models.PersonaVacante", b =>
                {
                    b.Property<int>("idPersonaVacante")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idPersonaVacante"), 1L, 1);

                    b.Property<int?>("PersonaidPersona")
                        .HasColumnType("int");

                    b.Property<int?>("VacanteidVacante")
                        .HasColumnType("int");

                    b.Property<int>("idPersona")
                        .HasColumnType("int");

                    b.Property<int>("idVacante")
                        .HasColumnType("int");

                    b.HasKey("idPersonaVacante");

                    b.HasIndex("PersonaidPersona");

                    b.HasIndex("VacanteidVacante");

                    b.ToTable("PersonaVacante");
                });

            modelBuilder.Entity("WorkNetwork.Models.Provincia", b =>
                {
                    b.Property<int>("idProvincia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idProvincia"), 1L, 1);

                    b.Property<int>("PaisidPais")
                        .HasColumnType("int");

                    b.Property<int>("idPais")
                        .HasColumnType("int");

                    b.Property<string>("nombreProvincia")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idProvincia");

                    b.HasIndex("PaisidPais");

                    b.ToTable("Provincia");
                });

            modelBuilder.Entity("WorkNetwork.Models.Rubro", b =>
                {
                    b.Property<int>("idRubro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idRubro"), 1L, 1);

                    b.Property<bool>("eliminado")
                        .HasColumnType("bit");

                    b.Property<string>("nombreRubro")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idRubro");

                    b.ToTable("Rubro");
                });

            modelBuilder.Entity("WorkNetwork.Models.SubRubro", b =>
                {
                    b.Property<int>("idSubRubro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idSubRubro"), 1L, 1);

                    b.Property<int?>("RubroidRubro")
                        .HasColumnType("int");

                    b.Property<bool>("eliminado")
                        .HasColumnType("bit");

                    b.Property<int>("idRubro")
                        .HasColumnType("int");

                    b.Property<string>("nombreSubRubro")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idSubRubro");

                    b.HasIndex("RubroidRubro");

                    b.ToTable("SubRubro");
                });

            modelBuilder.Entity("WorkNetwork.Models.Usuario", b =>
                {
                    b.Property<int>("idUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idUsuario"), 1L, 1);

                    b.Property<int?>("EmpresaidEmpresa")
                        .HasColumnType("int");

                    b.Property<int?>("PersonaidPersona")
                        .HasColumnType("int");

                    b.Property<int>("idEmpresa")
                        .HasColumnType("int");

                    b.Property<int>("idPersona")
                        .HasColumnType("int");

                    b.Property<int>("password")
                        .HasColumnType("int");

                    b.Property<DateTime>("ultActualizacion")
                        .HasColumnType("datetime2");

                    b.HasKey("idUsuario");

                    b.HasIndex("EmpresaidEmpresa");

                    b.HasIndex("PersonaidPersona");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("WorkNetwork.Models.Vacante", b =>
                {
                    b.Property<int>("idVacante")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idVacante"), 1L, 1);

                    b.Property<int?>("DisponibilidadHorariaidDisponibilidadHoraria")
                        .HasColumnType("int");

                    b.Property<int?>("EmpresaidEmpresa")
                        .HasColumnType("int");

                    b.Property<int?>("LocalidadidLocalidad")
                        .HasColumnType("int");

                    b.Property<int?>("PersonaidPersona")
                        .HasColumnType("int");

                    b.Property<int?>("SubRubroidSubRubro")
                        .HasColumnType("int");

                    b.Property<string>("descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("estado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("experienciaRequerida")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("fechaDeFinalizacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("idDisponibilidadHoraria")
                        .HasColumnType("int");

                    b.Property<int>("idEmpresa")
                        .HasColumnType("int");

                    b.Property<int>("idLocalidad")
                        .HasColumnType("int");

                    b.Property<int>("idPersona")
                        .HasColumnType("int");

                    b.Property<int>("idSubrubro")
                        .HasColumnType("int");

                    b.Property<string>("idiomas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("imagen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idVacante");

                    b.HasIndex("DisponibilidadHorariaidDisponibilidadHoraria");

                    b.HasIndex("EmpresaidEmpresa");

                    b.HasIndex("LocalidadidLocalidad");

                    b.HasIndex("PersonaidPersona");

                    b.HasIndex("SubRubroidSubRubro");

                    b.ToTable("Vacante");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WorkNetwork.Models.Empresa", b =>
                {
                    b.HasOne("WorkNetwork.Models.Localidad", "Localidad")
                        .WithMany("Empresas")
                        .HasForeignKey("LocalidadidLocalidad");

                    b.HasOne("WorkNetwork.Models.Rubro", "Rubro")
                        .WithMany("Empresas")
                        .HasForeignKey("RubroidRubro");

                    b.Navigation("Localidad");

                    b.Navigation("Rubro");
                });

            modelBuilder.Entity("WorkNetwork.Models.Localidad", b =>
                {
                    b.HasOne("WorkNetwork.Models.Provincia", "Provincia")
                        .WithMany("Localidades")
                        .HasForeignKey("ProvinciaidProvincia");

                    b.Navigation("Provincia");
                });

            modelBuilder.Entity("WorkNetwork.Models.Persona", b =>
                {
                    b.HasOne("WorkNetwork.Models.Localidad", "Localidad")
                        .WithMany("Personas")
                        .HasForeignKey("LocalidadidLocalidad");

                    b.HasOne("WorkNetwork.Models.SubRubro", "SubRubro")
                        .WithMany("Personas")
                        .HasForeignKey("SubRubroidSubRubro");

                    b.Navigation("Localidad");

                    b.Navigation("SubRubro");
                });

            modelBuilder.Entity("WorkNetwork.Models.PersonaVacante", b =>
                {
                    b.HasOne("WorkNetwork.Models.Persona", "Persona")
                        .WithMany("PersonaVacante")
                        .HasForeignKey("PersonaidPersona");

                    b.HasOne("WorkNetwork.Models.Vacante", "Vacante")
                        .WithMany("PersonaVacante")
                        .HasForeignKey("VacanteidVacante");

                    b.Navigation("Persona");

                    b.Navigation("Vacante");
                });

            modelBuilder.Entity("WorkNetwork.Models.Provincia", b =>
                {
                    b.HasOne("WorkNetwork.Models.Pais", "Pais")
                        .WithMany("Provincias")
                        .HasForeignKey("PaisidPais")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pais");
                });

            modelBuilder.Entity("WorkNetwork.Models.SubRubro", b =>
                {
                    b.HasOne("WorkNetwork.Models.Rubro", "Rubro")
                        .WithMany("SubRubros")
                        .HasForeignKey("RubroidRubro");

                    b.Navigation("Rubro");
                });

            modelBuilder.Entity("WorkNetwork.Models.Usuario", b =>
                {
                    b.HasOne("WorkNetwork.Models.Empresa", "Empresa")
                        .WithMany("Usuarios")
                        .HasForeignKey("EmpresaidEmpresa");

                    b.HasOne("WorkNetwork.Models.Persona", "Persona")
                        .WithMany("Usuarios")
                        .HasForeignKey("PersonaidPersona");

                    b.Navigation("Empresa");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("WorkNetwork.Models.Vacante", b =>
                {
                    b.HasOne("WorkNetwork.Models.DisponibilidadHoraria", "DisponibilidadHoraria")
                        .WithMany("Vacantes")
                        .HasForeignKey("DisponibilidadHorariaidDisponibilidadHoraria");

                    b.HasOne("WorkNetwork.Models.Empresa", "Empresa")
                        .WithMany("Vacantes")
                        .HasForeignKey("EmpresaidEmpresa");

                    b.HasOne("WorkNetwork.Models.Localidad", "Localidad")
                        .WithMany("Vacantes")
                        .HasForeignKey("LocalidadidLocalidad");

                    b.HasOne("WorkNetwork.Models.Persona", "Persona")
                        .WithMany("Vacantes")
                        .HasForeignKey("PersonaidPersona");

                    b.HasOne("WorkNetwork.Models.SubRubro", "SubRubro")
                        .WithMany("Vacantes")
                        .HasForeignKey("SubRubroidSubRubro");

                    b.Navigation("DisponibilidadHoraria");

                    b.Navigation("Empresa");

                    b.Navigation("Localidad");

                    b.Navigation("Persona");

                    b.Navigation("SubRubro");
                });

            modelBuilder.Entity("WorkNetwork.Models.DisponibilidadHoraria", b =>
                {
                    b.Navigation("Vacantes");
                });

            modelBuilder.Entity("WorkNetwork.Models.Empresa", b =>
                {
                    b.Navigation("Usuarios");

                    b.Navigation("Vacantes");
                });

            modelBuilder.Entity("WorkNetwork.Models.Localidad", b =>
                {
                    b.Navigation("Empresas");

                    b.Navigation("Personas");

                    b.Navigation("Vacantes");
                });

            modelBuilder.Entity("WorkNetwork.Models.Pais", b =>
                {
                    b.Navigation("Provincias");
                });

            modelBuilder.Entity("WorkNetwork.Models.Persona", b =>
                {
                    b.Navigation("PersonaVacante");

                    b.Navigation("Usuarios");

                    b.Navigation("Vacantes");
                });

            modelBuilder.Entity("WorkNetwork.Models.Provincia", b =>
                {
                    b.Navigation("Localidades");
                });

            modelBuilder.Entity("WorkNetwork.Models.Rubro", b =>
                {
                    b.Navigation("Empresas");

                    b.Navigation("SubRubros");
                });

            modelBuilder.Entity("WorkNetwork.Models.SubRubro", b =>
                {
                    b.Navigation("Personas");

                    b.Navigation("Vacantes");
                });

            modelBuilder.Entity("WorkNetwork.Models.Vacante", b =>
                {
                    b.Navigation("PersonaVacante");
                });
#pragma warning restore 612, 618
        }
    }
}
